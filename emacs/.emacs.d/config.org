#+TITLE: An Emacs Configuration
#+Author: dfireBird
#+Startup: Overview
* Table of Contents :TOC_3:
- [[#preface][Preface]]
- [[#pre-configuration][Pre-Configuration]]
  - [[#initialization][Initialization]]
  - [[#garbage-collection][Garbage Collection]]
- [[#package-setup][Package Setup]]
  - [[#package-installer][Package Installer]]
- [[#variables][Variables]]
- [[#startup][Startup]]
  - [[#backup][Backup]]
  - [[#elcord][Elcord]]
  - [[#keybindings][Keybindings]]
    - [[#which-key][Which-key]]
    - [[#multiple-cursors][Multiple-Cursors]]
    - [[#ace-window][Ace Window]]
  - [[#appearance][Appearance]]
    - [[#genreal-gui][Genreal GUI]]
    - [[#theme][Theme]]
    - [[#font][Font]]
    - [[#doom-mode-line][Doom mode line]]
    - [[#zoom][Zoom]]
    - [[#diff-hl][Diff-hl]]
  - [[#interface][Interface]]
    - [[#completion-frontend][Completion Frontend]]
    - [[#splash-screen][Splash Screen]]
  - [[#terminal][Terminal]]
  - [[#wakatime][Wakatime]]
  - [[#spell-check][Spell Check]]
- [[#programming][Programming]]
  - [[#general][General]]
    - [[#interactive][Interactive]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#linters][Linters]]
    - [[#flycheck][Flycheck]]
  - [[#documenation][Documenation]]
  - [[#debug-server][Debug Server]]
    - [[#lsp][LSP]]
    - [[#lsp-ui][LSP-UI]]
    - [[#debug-adapter-protocol-dap][Debug Adapter Protocol (DAP)]]
    - [[#indium][Indium]]
  - [[#treemacs][Treemacs]]
  - [[#code-completion][Code completion]]
    - [[#company][Company]]
  - [[#snippets][Snippets]]
- [[#languages][Languages]]
  - [[#htmlcss][HTML/CSS]]
  - [[#javascipt--typescript][JavaScipt / TypeScript]]
    - [[#react-config][React config]]
    - [[#tide][TIDE]]
    - [[#vue-config][Vue config]]
  - [[#cc][C/C++]]
    - [[#cmake][CMake]]
    - [[#ccls][CCLS]]
  - [[#rust][Rust]]
  - [[#python][Python]]
  - [[#gdscript][GdScript]]
- [[#literate-languages][Literate Languages]]
  - [[#org][Org]]
    - [[#table-of-contents][Table of Contents]]
    - [[#bullets][Bullets]]
- [[#data][Data]]
  - [[#docker][Docker]]
  - [[#yaml][Yaml]]
- [[#fun][Fun]]
  - [[#kana][Kana]]
  - [[#game][Game]]

* Preface
    After sometime in spacemacs (interested in emacs a long time 
    never had chance to come), it's time to write my own configuration!
    If you want these you can clone it and do anything as you wish.


    Thanks to [[https://github.com/the-programmers-hangout][TPH]] who made an spolight to help me switch into emacs world 
    after year long usage of VSCode and other IDEs!
    Special thanks to [[https://github.com/kkhan01][Shan]] who gave a lots of dot files I need.

* Pre-Configuration
** Initialization
    Lexical binding suppport globally! (I don't know what it tho?)

#+begin_src emacs-lisp
   ;; -*- lexical-binding: t -*-
#+end_src
** Garbage Collection
    Gargbage Collection is not needed (that's whay they say)
    (maybe needed on old machine - shan)

#+begin_src emacs-lisp
    (eval-and-compile
      (defun srs|revert-gc ()
        ;; reset values
        (setq gc-cons-threshold 16777216
              gc-cons-percentage 0.1
              file-name-handler-alist (append last-file-name-handler-alist
	  	                                  file-name-handler-alist))
        ;; delete any duplicate values
        (cl-delete-duplicates file-name-handler-alist :test 'equal)
        ;; get rid of temporarily variables
        (makunbound 'last-file-name-handler-alist))

      ;; set everything to efficient limits and save values
      (setq gc-cons-threshold most-positive-fixnum
            gc-cons-percentage 0.6
            last-file-name-handler-alist file-name-handler-alist
            file-name-handler-alist nil)

      (add-hook 'after-init-hook 'srs|revert-gc))
#+end_src
* Package Setup
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Package Installer
    A tool to automatically download the package from sources and loads it
    whenever the packages is in need

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq use-package-always-demand nil
        use-package-verbose t
	byte-compile-warnings nil)
  (straight-use-package 'use-package)
#+end_src

* Variables
   Variable for the use in this config
#+begin_src emacs-lisp
    (defconst firebird/settings-path (concat user-emacs-directory "settings/settings.el"))
    (message firebird/settings-path)
    (defconst firebird/settings-exist? (file-exists-p firebird/settings-path))
    (when firebird/settings-exist?
      (load-file firebird/settings-path))
#+end_src
* Startup
** Backup
    Backups are take hella time to clean and it's so ugly
#+begin_src emacs-lisp
    (setq-default backup-inhibited t
                  auto-save-default nil
		  create-lockfiles nil
		  make-backup-files nil)
#+end_src
** Elcord
    Elcord is RPC for discord (I like to showoff)

#+begin_src emacs-lisp
  (use-package elcord
    :init
    (elcord-mode)
    :custom
    (elcord-client-id "714056771391717468")
    (elcord-use-major-mode-as-main-icon t))

  (setq elcord-mode-icon-alist '((c-mode           .  "c-mode_icon")
				 (cpp-mode         .  "cpp-mode_icon")
				 (csharp-mode      .  "csharp-mode_icon")
				 (css-mode         .  "css-mode_icon")
				 (emacs            .  "emacs_icon")
				 (gdscript-mode    .  "gdscript-mode_icon")
				 (go-mode          .  "go-mode_icon")
				 (haskell-mode     .  "haskell-mode_icon")
				 (html-mode        .  "html-mode_icon")
				 (web-mode         .  "html-mode_icon")
				 (java-mode        .  "java-mode_icon")
				 (js-mode          .  "javascript-mode_icon")
				 (kotlin-mode      .  "kotlin-mode_icon")
				 (lua-mode         .  "lua-mode_icon")
				 (magit-mode       .  "magit-mode_icon")
				 (markdown-mode    .  "markdown-mode_icon")
				 (nim-mode         .  "nim-mode_icon")
				 (org-mode         .  "org-mode_icon")
				 (php-mode         .  "php-mode_icon")
				 (python-mode      .  "python-mode_icon")
				 (r-mode           .  "r-mode_icon")
				 (ruby-mode        .  "ruby-mode_icon")
				 (rust-mode        .  "rust-mode_icon")
				 (rustic-mode      .  "rust-mode_icon")
				 (sh-mode          .  "sh-mode_icon")
				 (swift-mode       .  "swift-mode_icon")
				 (typescript-mode  .  "typescript-mode_icon")))
#+end_src

** Keybindings
*** Which-key
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
#+end_src

*** Multiple-Cursors
   Multiple cursors is one of features I used in VSCode now I can use it here
   too
#+begin_src emacs-lisp
    (use-package multiple-cursors
      :bind
      ("C->" . mc/mark-next-like-this)
      ("C-<" . mc/mark-previous-like-this)
      ("C-s-e" . mc/edit-lines))

    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
#+end_src
*** Ace Window
#+begin_src emacs-lisp
    (use-package ace-window
      :bind
      ("M-o" . ace-window))
#+end_src
** Appearance
*** Genreal GUI
    The config to disable menu, tool and scroll bars
#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
#+end_src
*** Theme
    Doom-theme especially for doom-modeline
#+begin_src emacs-lisp
    (use-package doom-themes
      :config
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
      (load-theme 'doom-one t)

      (doom-themes-visual-bell-config)
      (setq doom-themes-treemacs-theme "doom-colors")
      (doom-themes-treemacs-config)
      
      (doom-themes-org-config))

    (use-package ewal
      :init
      (setq ewal-use-built-in-always-p nil
            ewal-use-built-in-on-failure-p t
            ewal-built-in-palette "sexy-material"))

    (use-package ewal-doom-themes
      :config (progn
                (load-theme 'ewal-doom-vibrant t)
		(enable-theme 'ewal-doom-vibrant)))

    (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
    (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src

*** Font
#+begin_src emacs-lisp
    (defun aorst/font-installed-p (font-name)
      "Check if font with FONT-NAME is available."
      (if (find-font (font-spec :name font-name))
          t
	nil))
    (use-package all-the-icons
      :config
      (when (and (not (aorst/font-installed-p "all-the-icons"))
                 (window-system))
        (all-the-icons-install-fonts t)))


    (set-face-attribute 'default nil 
                         :family "Jetbrains Mono"
			 :height 105)
    (set-face-attribute 'mode-line nil
                         :family "Jetbrains Mono"
			 :height 100)
    (set-face-attribute 'mode-line-inactive nil
                         :family "Jetbrains Mono"
			 :height 100)

    (use-package emojify
      :init
      (global-emojify-mode)
      :bind
      ("C-x C-i" . emojify-insert-emoji))
#+end_src

*** Doom mode line
    Needed for modeline features
#+begin_src emacs-lisp
    (line-number-mode t)
    (column-number-mode t)
    (display-battery-mode t)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
    Doom mode line is custome mode line with several unqiue features
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode t)
      :custom
      (doom-modeline-icon t)
      (doom-modeline-major-mode-icon t)
      (doom-modeline-buffer-encoding nil)
      (doom-modeline-buffer-file-name-style 'relative-from-project)
      (doom-modeline--battery-status t)
      (doom-modeline-github t)
      (doom-modeline-lsp t))

    (use-package nyan-mode
      :init (nyan-mode t)
      :config
      (setq nyan-animate-nyancat t)
      (setq nyan-wavy-trail t)
      (setq nyan-bar-length 25)
      (nyan-start-animation))
#+end_src
*** Zoom
    Zoom manages window size
#+begin_src emacs-lisp
(use-package zoom
  :bind
  ("C-x +" . zoom)
  :custom
  (zoom-mode t))
#+end_src
*** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    ((magit-pre-refresh  . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    (global-diff-hl-mode))
#+end_src
** Interface
*** Completion Frontend
    Ivy is minimal and custom completion frontend which I'm going to use
#+begin_src emacs-lisp
    (use-package ivy
      :bind
      ("C-x b" . ivy-switch-buffer)
      :custom
      (ivy-use-virtual-buffers t)
      (enable-recursive-mini-buffers t)
      :config
      (ivy-mode))

    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

    (use-package counsel
      :bind
      ("C-x C-f" . counsel-find-file)
      ("M-x" . counsel-M-x)
      ("C-h f" . counsel-describe-function)
      ("C-h v" . counsel-describe-variable))

    (use-package counsel-projectile)

    (use-package swiper
      :bind
      ("C-s" . swiper-isearch)
      ("C-r" . swiper-isearch-backward))
#+end_src
*** Splash Screen
#+begin_src emacs-lisp
    (use-package page-break-lines)
    (use-package recentf
      :straight nil
      :config
      (setq recentf-exclude '("languages.org"
                             "tech.org"
			     "birdtorrent.org")))

    (use-package dashboard
      :custom
      (dashboard-center-content t)
      (dashboard-set-heading-icons t)
      (dashboard-set-file-icons t)
      (dashboard-startup-banner 'logo)
      :config
      (setq dashboard-items '((projects  . 5)
                              (recents . 5)
			      (agenda . 5)))
      (dashboard-setup-startup-hook))
#+end_src
** Terminal
    Vterm is used for built-in terminal emulator for emacs
#+begin_src emacs-lisp
    (use-package vterm
      :commands (vterm)
      :bind
      ("C-c t" . vterm))
#+end_src
** Wakatime
    Wakatime is used to monitor my coding activity
#+begin_src emacs-lisp
    (use-package wakatime-mode
      :if (and (executable-find "wakatime") (boundp 'wakatime-api-key))
      :custom
      (wakatime-cli-path (executable-find "wakatime"))
      :init
      (global-wakatime-mode))
#+end_src
** Spell Check
   I'm using flyspell here for spell check.
#+begin_src emacs-lisp
  ;; (dolist (hook '(text-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode 1))))
  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src
* Programming
** General
*** Interactive
#+begin_src emacs-lisp
    (electric-pair-mode)
    (show-paren-mode)

    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package paren
      :config
      (show-paren-mode t))

    (use-package hs-minor-mode
      :straight nil
      :hook
      (prog-mode . hs-minor-mode)
      :bind
      ("<C-tab>" . hs-toggle-hiding))

    (use-package smartparens
      :hook
      (prog-mode . smartparens-mode)
      :custom
      (sp-escape-quotes-after-insert nil)
      :config
      (require 'smartparens-config))

    (use-package highlight-indent-guides
      :hook (prog-mode . highlight-indent-guides-mode)
      :custom (highlight-indent-guides-method 'character))
#+end_src
** Projectile
    Projectile give emacs the project management features and have version 
    control intergration as well

#+begin_src emacs-lisp
    (use-package projectile
      :config
      ;; Useful for CMake-based project and use of ccls with C/C++
      (setq projectile-project-root-files-top-down-recurring
       (append
        '("compile_commands.json" ".ccls")
        projectile-project-root-files-top-down-recurring))
      (setq projectile-globally-ignored-directories
       (append
        '("build" "CMakeFiles" ".ccls-cache")
        projectile-globally-ignored-directories))
      (setq projectile-globally-ignored-files
       (append
        '("cmake_install.cmake")
        projectile-globally-ignored-files))
      :custom
      (projectile-project-search-path '("~/Projects"))
      (projectile-enable-caching t)
      (projectile-require-project-root t)
      (projectile-sort-order 'default)
      (projectile-completion-system 'ivy)
      :bind
      ([f5] . projectile-run-project)
      :init
      (projectile-mode))

    (use-package projectile-ripgrep)
      
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src
** Magit
    Magit is git interface for Emacs which is similar to git tools in many IDEs
    and text-editors

#+begin_src emacs-lisp
    (use-package magit
      :bind
      ("C-x g" . magit))

    (use-package forge
      :after magit)
#+end_src
** Linters
*** Flycheck
    Flycheck is popular linter interface for emacs that allow external linters
    to use in emacs! 
    
#+begin_src emacs-lisp
    (use-package flycheck
      :hook (after-init . global-flycheck-mode)
      :custom-face
      (flycheck-info ((t (:underline (:style line)))))
      (flycheck-warning ((t (:underline (:style line)))))
      (flycheck-error ((t (:underline (:style line)))))

      :custom
      (flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src
** Documenation
    Eldoc shows arguments for function overloads in echo area
#+begin_src emacs-lisp
    (use-package eldoc
      :straight nil
      :hook (after-init . global-eldoc-mode))
#+end_src

** Debug Server
*** LSP
    LSP gives IDE-like features to Emacs and add features : semantic
    higlighting, auto-completion and others

#+begin_src emacs-lisp
    (use-package lsp-mode
      :commands lsp
      :config
      (setq lsp-prefer-capf t)
      :custom
      (lsp-auto-guess-root t)
      (lsp-logo-io t)
      (lsp-prefer-flymake nil))
#+end_src
*** LSP-UI
    This package give UI to LSP server such as popups and visual indicators.
#+begin_src emacs-lisp
    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-delay 2.0)
      (lsp-ui-flycheck-enable t)
      (lsp-ui-peek-always-show t))
#+end_src

*** Debug Adapter Protocol (DAP)
    DAP is analogous to LSP.
#+begin_src emacs-lisp
    (use-package dap-mode
      :after lsp-mode
      :config
      (dap-mode t)
      (dap-ui-mode t))

    (use-package dap-chrome
      :straight nil)

    (use-package dap-node
      :straight nil)

#+end_src

*** Indium
#+begin_src emacs-lisp
  (use-package indium)
#+end_src
** Treemacs
   Treemacs is used for IDE-like file tree.

#+begin_src emacs-lisp
    (use-package treemacs
      :bind (:map global-map
                  ("C-x t t"  . treemacs)
                  ("C-x t 1"  . treemacs-select-window)
		  ("M-0"      . treemacs-select-window))
      :custom
      (treemacs-resize-icons 4)
      (treemacs-width 25))

      (use-package lsp-treemacs
        :init
        (lsp-treemacs-sync-mode 4))
        
      (use-package treemacs-projectile
        :after treemacs projectile)

      (use-package treemacs-magit
        :after treemacs magit)

      (use-package treemacs-icons-dired
        :after treemacs dired
        :config (treemacs-icons-dired-mode))
#+end_src

** Code completion
    There are several code completion backends and frontends! Company and auto-
    complete are popular.
*** Company
    Company is popular code completion  package which is used often. It's 
    a frontend and it's needs a server/backend to function

#+begin_src emacs-lisp
    (use-package company
      :hook (after-init . global-company-mode)
      :bind
      ("C-;" . company-complete)
      :custom
      (custom-idle-delay 0)
      (company-tooltip-align-annotation t)
      (company-minimum-prefix-length 0))

    (use-package company-web
      :straight (company-web
                  :type git :host github :repo "osv/company-web"))
#+end_src
**** Company Box
#+begin_src emacs-lisp
    (use-package company-box
      :hook (company-mode . company-box-mode))
#+end_src
** Snippets
    Snippets template provided by YASnippets it make snippet easier
#+begin_src emacs-lisp
    (use-package yasnippet
      :config
      (use-package yasnippet-snippets)
      (yas-global-mode 1))
#+end_src
* Languages
** HTML/CSS
    Emmet auto completion is used for HTML and CSS.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((css-mode php-mode sgml-mode rjsx-mode web-mode) . emmet-mode))
  (use-package web-mode
    :mode
    (("\\.html?\\'"     .    web-mode)
     ("\\.phtml\\'"     .    web-mode)
     ("\\.tpl\\.php\\'" .    web-mode)
     ("\\.[agj]sp\\'"   .    web-mode)
     ("\\.as[cp]x\\'"   .    web-mode)
     ("\\.erb\\'"       .    web-mode)
     ("\\.mustache\\'"  .    web-mode)
     ("\\.djhtml\\'"    .    web-mode)))
#+end_src

** JavaScipt / TypeScript
    The usage of react and variety of standards has made it hard to configure

#+begin_src emacs-lisp
    (use-package typescript-mode
      :hook
      (typescript-mode . lsp)
      :mode (("\\.ts\\'" . typescript-mode)
             ("\\.tsx\\'" . typescript-mode)))

    (use-package prettier-js
      :bind ("C-c f")
      :hook
      ((js-mode . prettier-js-mode)
       (typescript-mode . prettier-js-mode)
       (rjsx-mode . prettier-js-mode)))
    (use-package add-node-modules-path
      :hook ((web-mode rjsx-mode). add-node-modules-path))
#+end_src

*** React config
    Should not bind rjsx with tsx mode

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :hook
    (rjsx-mode . lsp)
    :mode
    (("\\.js\\'"   . rjsx-mode)
     ("\\.jsx\\'"  . rjsx-mode)
     ("\\.json\\'" . json-mode))
    :magic ("/\\*\\* @jsx React\\.Dom \\*/" "^import React")
    :init
    (setq-default rjsx-basic-offset 2)
    (setq-default rjsx-global-externs '("module" "require" "assert" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON")))

  ;; TSX
  (use-package web-mode
    :straight nil
    :mode
    (("\\.tsx\\'"   .    web-mode))
    :config
    ;;TSX config
     (add-hook 'web-mode-hook
               (lambda ()
                 (when (string-equal "tsx" (file-name-extension buffer-file-name))
		   (add-to-list 'company-backends '(company-web-html))
		   (tide-setup))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode))

  (use-package react-snippets
    :after yasnippet)
#+end_src

*** TIDE
    This config is TypeScript Interactive Developement Environement for Emacs
    (TIDE)

#+begin_src emacs-lisp
  (use-package tide
    :after
    (typescript-mode company flycheck)
    :hook
    ((typescript-mode . tide-setup)
     (typescript-mode . tide-hl-identifier-mode)
     (before-save . tide-format-before-save))
    :config
    (flycheck-add-next-checker 'typescript-tide 'javascript-eslint)
    (flycheck-add-next-checker 'tsx-tide 'javascript-eslint))
#+end_src

*** Vue config
    This for later if I start vue

#+begin_src emacs-lisp
    (use-package vue-html-mode)

    (use-package vue-mode
      :mode
      (("\\.vue'" . vue-mode)))
#+end_src

** C/C++
    No install is needed for C/C++ and its available as a core mode.

#+begin_src emacs-lisp
    (setq c-basic-offset 4)
    (setq c-default-style
          '((java-mode . "java")
            (awk-mode . "awk")
            (other . "k&r")))
    (setq c-doc-comment-style
          '((c-mode . javadoc)
            (java-mode . javadoc)
            (pike-mode . autodoc)))

    (use-package c-mode
      :straight nil
      :hook (c-mode . lsp))

    (use-package c++-mode
      :straight nil
      :hook (c++-mode . lsp))

    (setq gdb-many-windows t)
#+end_src

*** CMake 
    CMake is popular build tool and used popular C++ oss I contribrute

#+begin_src emacs-lisp
    (use-package cmake-mode
      :mode
      (("CMakeLists\\.txt\\'" . cmake-mode)
       ("CMakeCache\\.txt\\'" . cmake-mode)
       ("\\.cmake\\'" . cmake-mode))
      :custom
      (cmake-tab-width 4))
#+end_src 

*** CCLS
    CCLS has more features support than Clangd, like semantic highlighting...
#+begin_src emacs-lisp
    (use-package ccls
      :after lsp-mode
      :config
      (setq ccls-initialization-options '(:index (:threads 1)))
      :hook ((c-mode c++-mode) . (lambda ()
                                   (require 'ccls)
                                   (lsp))))
#+end_src
** Rust
#+begin_src emacs-lisp
    (use-package rustic
      :config
      (setq rustic-ansi-faces ansi-color-names-vector)
      :custom
      (rustic-format-on-save t)
      (rustic-indent-method-chain t)
      (rustic-lsp-server 'rust-analyzer))
#+end_src
** Python
Install Pyls
#+begin_src emacs-lisp
  (use-package python
    :if (executable-find "pyls")
    :straight nil
    :hook (python-mode . lsp)
    :custom
    (python-indent 4)
    (python-fill-docstring-style 'pep-257)
    (python-indent-guess-indent-offset nil))
#+end_src
** GdScript
#+begin_src emacs-lisp
  (use-package gdscript-mode)
#+end_src
* Literate Languages
** Org
   Org is one of the literate languages (like markdown), I started it using
   when I started this config 
#+begin_src emacs-lisp
    (straight-override-recipe
       '(org :type git :host github :repo "emacsmirror/org" :no-build t))
    (use-package org
      :mode 
      ("\\.\\(org\\|ORG\\)\\'" . org-mode)
      :custom
      (org-pretty-entities t)
      :bind ("C-c a" . org-agenda))

  (use-package grip-mode)

  (setq org-agenda-files '("~/Projects/agenda"))
  (defun dfirebird/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY maybe one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
	(pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (alltodo ""
                     ((org-agenda-skip-function '(or (dfirebird/org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))))
#+end_src
*** Table of Contents
   toc-org provides toc without exporting it (useful for Github)
#+begin_src emacs-lisp
    (use-package toc-org
      :after (org)
      :hook
      (org-mode . toc-org-enable))
#+end_src

*** Bullets
    org-bullets provide UTF-8 bullets for heading and others
#+begin_src emacs-lisp
    (use-package org-bullets
      :after (org)
      :hook
      (org-mode . org-bullets-mode))
#+end_src

* Data
** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode
    (("Dockerfile'"      .    dockerfile-mode)
     ("\\.Dockerfile\\'" .    dockerfile-mode))
    :hook (dockerfile-mode . lsp))

  (use-package docker)
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'"  .  yaml-mode)
    :config
    (add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src
* Fun
** Kana
    Kana is helper to learn Japanese.
#+begin_src emacs-lisp
    (use-package kana
      :straight (kana :type git :host github :repo "chenyanming/kana"))
#+end_src
** Game
#+begin_src emacs-lisp
(use-package 2048-game)
#+end_src
